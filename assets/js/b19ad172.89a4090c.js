"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8037],{3905:function(t,e,n){n.d(e,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function s(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var l=r.createContext({}),u=function(t){var e=r.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):s(s({},e),t)),n},c=function(t){var e=u(t.components);return r.createElement(l.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,i=t.originalType,l=t.parentName,c=o(t,["components","mdxType","originalType","parentName"]),m=u(n),d=a,g=m["".concat(l,".").concat(d)]||m[d]||p[d]||i;return n?r.createElement(g,s(s({ref:e},c),{},{components:n})):r.createElement(g,s({ref:e},c))}));function d(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var i=n.length,s=new Array(i);s[0]=m;var o={};for(var l in e)hasOwnProperty.call(e,l)&&(o[l]=e[l]);o.originalType=t,o.mdxType="string"==typeof t?t:a,s[1]=o;for(var u=2;u<i;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6841:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return c},default:function(){return m}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),s=["components"],o={sidebar_position:7},l="Get Data with React-Query and Strapi API",u={unversionedId:"react/react-query-strapi",id:"react/react-query-strapi",isDocsHomePage:!1,title:"Get Data with React-Query and Strapi API",description:"Install",source:"@site/docs/react/react-query-strapi.md",sourceDirName:"react",slug:"/react/react-query-strapi",permalink:"/docs/react/react-query-strapi",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Jekyll Docker Compose",permalink:"/docs/docker/jekyllDocker"},next:{title:"Get Data with React-Query",permalink:"/docs/react/react-query"}},c=[{value:"Install",id:"install",children:[],level:2},{value:"Usage",id:"usage",children:[{value:"1. In App.tsx file",id:"1-in-apptsx-file",children:[],level:3},{value:"2. Get Data from API",id:"2-get-data-from-api",children:[],level:3},{value:"3. In Home.tsx file",id:"3-in-hometsx-file",children:[],level:3},{value:"4. An Example Types file for the API",id:"4-an-example-types-file-for-the-api",children:[],level:3}],level:2}],p={toc:c};function m(t){var e=t.components,n=(0,a.Z)(t,s);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"get-data-with-react-query-and-strapi-api"},"Get Data with React-Query and Strapi API"),(0,i.kt)("h2",{id:"install"},"Install"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @tanstack/react-query\n")),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("h3",{id:"1-in-apptsx-file"},"1. In App.tsx file"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},'import { QueryClient, QueryClientProvider } from "@tanstack/react-query";\n\nconst queryClient = new QueryClient();\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <div className="App">\n        <h1>React Query</h1>\n      </div>\n    </QueryClientProvider>\n  );\n}\n')),(0,i.kt)("h3",{id:"2-get-data-from-api"},"2. Get Data from API"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="getData.ts"',title:'"getData.ts"'},"export async function getData(url: string) {\n  const response = await fetch(`${url}`);\n  const data = await response.json();\n  return data;\n}\n")),(0,i.kt)("h3",{id:"3-in-hometsx-file"},"3. In Home.tsx file"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="Home.tsx"',title:'"Home.tsx"'},'import { useQuery } from "@tanstack/react-query";\nimport { getData } from "../api/getData";\n\nexport const Home = () => {\n  const { data: stations } = useQuery<Root>({\n    queryKey: ["stations"],\n    queryFn: () =>\n      getData("https://aztec-api.ktinternet.net/api/stations?populate=*"),\n  });\n\n  const image_url = "https://aztec-api.ktinternet.net";\n\n  return (\n    <div>\n      <h1>Home</h1>\n      {isLoading ? (\n        <div>Loading...</div>\n      ) : (\n        <div>\n          {stations?.data.map((station: Daum) => {\n            const attrs: Attributes = station.attributes;\n\n            return (\n              <div\n                key={station.id}\n                className="h-auto m-1 overflow-hidden bg-white rounded-lg w-96"\n              >\n                <h2 className="text-2xl font-bold">{attrs.station_name}</h2>\n                <p className="text-md">{attrs.station_tagline}</p>\n                <img\n                  src={\n                    image_url +\n                    attrs?.stationLogo?.data?.attributes?.formats?.thumbnail\n                      ?.url\n                  }\n                  alt={attrs.station_name} // For accessibility, you might want to provide a meaningful alt text\n                />\n              </div>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n};\n')),(0,i.kt)("h3",{id:"4-an-example-types-file-for-the-api"},"4. An Example Types file for the API"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="types.ts"',title:'"types.ts"'},"export interface Root {\n  data: Daum[];\n  meta: Meta;\n}\n\nexport interface Daum {\n  id: number;\n  attributes: Attributes;\n}\n\nexport interface Attributes {\n  url: string;\n  station_name: string;\n  station_tagline: string;\n  createdAt: string;\n  updatedAt: string;\n  publishedAt: string;\n  stationLogo: StationLogo;\n}\n\nexport interface StationLogo {\n  data?: Data;\n}\n\nexport interface Data {\n  id: number;\n  attributes: Attributes2;\n}\n\nexport interface Attributes2 {\n  name: string;\n  alternativeText: any;\n  caption: any;\n  width: number;\n  height: number;\n  formats: Formats;\n  hash: string;\n  ext: string;\n  mime: string;\n  size: number;\n  url: string;\n  previewUrl: any;\n  provider: string;\n  provider_metadata: any;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface Formats {\n  large: Large;\n  small: Small;\n  medium: Medium;\n  thumbnail: Thumbnail;\n}\n\nexport interface Large {\n  ext: string;\n  url: string;\n  hash: string;\n  mime: string;\n  name: string;\n  path: any;\n  size: number;\n  width: number;\n  height: number;\n}\n\nexport interface Small {\n  ext: string;\n  url: string;\n  hash: string;\n  mime: string;\n  name: string;\n  path: any;\n  size: number;\n  width: number;\n  height: number;\n}\n\nexport interface Medium {\n  ext: string;\n  url: string;\n  hash: string;\n  mime: string;\n  name: string;\n  path: any;\n  size: number;\n  width: number;\n  height: number;\n}\n\nexport interface Thumbnail {\n  ext: string;\n  url: string;\n  hash: string;\n  mime: string;\n  name: string;\n  path: any;\n  size: number;\n  width: number;\n  height: number;\n}\n\nexport interface Meta {\n  pagination: Pagination;\n}\n\nexport interface Pagination {\n  page: number;\n  pageSize: number;\n  pageCount: number;\n  total: number;\n}\n")))}m.isMDXComponent=!0}}]);